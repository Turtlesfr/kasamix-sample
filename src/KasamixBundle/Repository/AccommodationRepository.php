<?php

namespace KasamixBundle\Repository;

use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use KasamixBundle\Entity\Accommodation;
use KasamixBundle\Entity\Project;
use KasamixBundle\Entity\Room;
use KasamixBundle\Entity\Surface;

/**
 * AccommodationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccommodationRepository extends EntityRepository
{
    public function getAccommodationList(Project $project): array
    {
        $query = $this->createQueryBuilder('a');
        $query->select('a')
            ->join('a.project', 'p')
            ->where('p.id = :projectId')
            ->setParameter('projectId', $project->getId())
            ->orderBy('a.id', Criteria::DESC);
        $results = $query->getQuery()->getResult(Query::HYDRATE_ARRAY);
        $data = [];
        foreach ($results as $result) {
            /**
             * @var \DateTime $dateEnd
             * @var \DateTime $createdAt
             * @var \DateTime $updatedAt
             */
            $dateEnd = $result['dateEnd'];
            $createdAt = $result['createdAt'];
            $updatedAt = $result['updatedAt'];

            $data[] = [
                'id'       => $result['id'],
                'name'     => $result['name'],
                'building' => $result['building'],
                'alley'    => $result['alley'],
                'floor'    => $result['floor'],
                'number'   => $result['number'],
                'comment'  => $result['comment'],
                'status'   => $result['status'],

                'dateEnd'   => is_a($dateEnd, \DateTime::class) ? $dateEnd->format('d-m-Y') : '',
                'createdAt' => is_a($createdAt, \DateTime::class) ? $createdAt->format(
                    'd-m-Y'
                ) : '',
                'updatedAt' => is_a($updatedAt, \DateTime::class) ? $updatedAt->format(
                    'd-m-Y'
                ) : '',
            ];
        }

        return $data;
    }
    public function getLogisticEditList(Accommodation $accommodation)
    {
        $data = [];
        /** @var Room $room */
        /** @var Surface $surface */
        foreach ($accommodation->getRoom() as $room) {
            foreach ($room->getSurface() as $surface) {
                $data[] = [
                    'room'           => $room->getName(),
                    'surface'        => $surface->getSurfaceModelId()->getTitle(),
                    'covering'       => $surface->getSurfaceModelId()->getSurfaceModelHasCovering()->count(),
                    'covering_name'  => 'need to fix relations cause can be multiple coverage',
                    'surface_status' => $surface->getStatus(),
                ];
            }
        }

        return $data;
    }

    public function setStatus(Accommodation $accommodation, int $statusId)
    {
        $accommodation->setStatus($statusId);
        $this->_em->persist($accommodation);

        if (!$accommodation) {
            throw new NotFoundHttpException('Surface not found');
        }        
        try {
            $this->_em->flush();
            return true;
        } catch (\Throwable $exception) {
            return $exception;
        }
    }
    public function getStatus(Accommodation $accommodation)
    {
        $status = $accommodation->getStatus();
        return $status;
    }
}
